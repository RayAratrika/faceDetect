{"version":3,"sources":["Components/logo.png","Components/Logo.js","Components/ImageLink.js","Components/RecognitionBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","style","textAlign","src","logo","width","height","marginTop","marginLeft","ImageLink","onInput","onSubmit","type","border","borderRadius","onChange","onClick","RecognitionBox","boxVal","url","id","alt","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","parameters","app","Clarifai","App","apiKey","props","event","setState","input","target","value","calculateFaceLocation","data","console","log","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","box","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","params","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7c81faa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f5d08743.png\";","import React from 'react';\r\nimport logo from './logo.png';\r\n\r\nconst Logo = () => {\r\n    return(\r\n        <div className='f3'>\r\n            <p style={{textAlign: 'left'}}><img src={logo} style={{width: '120px', height: 'auto', marginTop: '2%', marginLeft: '10%'}} /></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nconst ImageLink = ({onInput,onSubmit}) => {\r\n    return (\r\n        <div style={{marginTop: '-6%'}}>\r\n            <p className='f1'>\r\n                {'Welcome to faceDetect.'}\r\n            </p>\r\n            <p className='f5'>\r\n                {'Paste a link in the box and press detect to detect the face in the picture.'}\r\n            </p>\r\n            <div>\r\n                <input type = 'text' className='f4 pa2 w-50 center' style={{border:'none', borderRadius: '20px'}} onChange={onInput}/>\r\n                <button className='w-8 mh3 grow f4 link ph3 pv2 dib black' style={{border:'none', borderRadius: '20px'}} onClick={onSubmit}>DETECT</button>\r\n            </div>\r\n            <p className='f6'>Works with pictures having a single face.</p>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ImageLink;","import React from 'react';\r\nimport './RecognitionBox.css';\r\n\r\nconst RecognitionBox = ({ boxVal, url }) => {\r\n  return (\r\n    <div className='hell'>\r\n      <div className='relative mt2'>\r\n        <img id='inputImg' alt='' src={url} width='300px' heigh='auto' />\r\n        <div className='bounding_box' style={{ top: boxVal.topRow, right: boxVal.rightCol, width: boxVal.rightCol, bottom: boxVal.bottomRow, left: boxVal.leftCol }}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecognitionBox;","import React from 'react';\nimport Logo from './Components/Logo';\nimport ImageLink from './Components/ImageLink';\nimport RecognitionBox from './Components/RecognitionBox';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nconst parameters = {\n  \"particles\": {\n    \"number\": {\n      \"value\": 70,\n    },\n    \"size\": {\n      \"value\": 3\n    }\n  },\n  \"interactivity\": {\n    \"events\": {\n      \"onhover\": {\n        \"enable\": true,\n        \"mode\": \"repulse\"\n      },\n      \"onclick\": {\n        \"enable\": true,\n        \"mode\": 'push',\n      }\n    }\n  }\n};\n\nconst app = new Clarifai.App({\n  apiKey: 'd55e2a885bca47df9b4303776e514d5f'\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      url: '',\n      box: {},\n    }\n  }\n\n  onInput = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  calculateFaceLocation = (data) => {\n    console.log(data);\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImg');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  onSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input)\n      .then(response => {\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={parameters} />\n        <Logo />\n        <ImageLink onInput={this.onInput} onSubmit={this.onSubmit} />\n        <RecognitionBox boxVal={this.state.box} url={this.state.input} />\n        {/*<Logo />\n          <Rank />*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}